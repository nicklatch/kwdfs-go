// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: locations.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllLocations = `-- name: GetAllLocations :many
SELECT d.dealer,
       l.branch_name,
       l.city_county,
       l.state,
       l.fleet_support_rep,
       l.fleet_support_rep_email,
       l.general_phone
FROM locations l
         INNER JOIN dealers d ON l.dealer = d.id
ORDER BY l.city_county
`

type GetAllLocationsRow struct {
	Dealer               string      `json:"dealer"`
	BranchName           string      `json:"branch_name"`
	CityCounty           string      `json:"city_county"`
	State                string      `json:"state"`
	FleetSupportRep      string      `json:"fleet_support_rep"`
	FleetSupportRepEmail pgtype.Text `json:"fleet_support_rep_email"`
	GeneralPhone         pgtype.Text `json:"general_phone"`
}

func (q *Queries) GetAllLocations(ctx context.Context) ([]GetAllLocationsRow, error) {
	rows, err := q.db.Query(ctx, getAllLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllLocationsRow
	for rows.Next() {
		var i GetAllLocationsRow
		if err := rows.Scan(
			&i.Dealer,
			&i.BranchName,
			&i.CityCounty,
			&i.State,
			&i.FleetSupportRep,
			&i.FleetSupportRepEmail,
			&i.GeneralPhone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocationByBranchName = `-- name: GetLocationByBranchName :one
SELECT d.dealer,
       l.branch_name,
       l.city_county,
       l.state,
       l.fleet_support_rep,
       l.fleet_support_rep_email,
       l.general_phone
FROM locations l
         INNER JOIN dealers d ON l.dealer = d.id
WHERE l.branch_name = $1
`

type GetLocationByBranchNameRow struct {
	Dealer               string      `json:"dealer"`
	BranchName           string      `json:"branch_name"`
	CityCounty           string      `json:"city_county"`
	State                string      `json:"state"`
	FleetSupportRep      string      `json:"fleet_support_rep"`
	FleetSupportRepEmail pgtype.Text `json:"fleet_support_rep_email"`
	GeneralPhone         pgtype.Text `json:"general_phone"`
}

func (q *Queries) GetLocationByBranchName(ctx context.Context, branchName string) (GetLocationByBranchNameRow, error) {
	row := q.db.QueryRow(ctx, getLocationByBranchName, branchName)
	var i GetLocationByBranchNameRow
	err := row.Scan(
		&i.Dealer,
		&i.BranchName,
		&i.CityCounty,
		&i.State,
		&i.FleetSupportRep,
		&i.FleetSupportRepEmail,
		&i.GeneralPhone,
	)
	return i, err
}
